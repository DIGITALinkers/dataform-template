config {
    type: "incremental",
    schema: "staging", 
    name: "session_flags",
    description: "Table of flattened GA4 events, enriched with session-level flags",
    uniqueKey: ["unique_event_id"],
    bigquery: {
        partitionBy: "date_partition",
        updatePartitionFilter: "date_partition >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)"
    },
    tags: ['flags']
}

pre_operations {
-- before the main query runs, we check whether we are in an incremental run (or in a full refresh)
-- if it's an incremental run, we start by deleting the data for the past 3 days
-- that will then be inserted again by the incremental run.
  ${
    when(incremental(),
      `delete from ${self()} where event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)`
      )
  }
}

/******************************************************************
-- Step 1 : get all events + session flags that will be used ------
-- downstream to track behaviour ----------------------------------
******************************************************************/

WITH event_data AS 
(
SELECT *
FROM ${ref('flat_events')}
WHERE 1=1

    -- for incremental runs, we only want to run the query on the past 3 days. For that we use the incremental() built-in function
    -- combined with the when() built-in function and with a variable "incremental_days_refresh", defined in dataform.json.
    
    ${when(incremental(),
              `and date_partition >= DATE_SUB(CURRENT_DATE(), INTERVAL CAST(${dataform.projectConfig.vars.incremental_days_refresh} AS INT64) DAY)`
       )}
)

, flags AS 
(
SELECT 
    unique_session_id, 
    ${helpers.eventFlagColumns(constants.trackedEventNames)}
FROM event_data 
GROUP BY 
    unique_session_id
)

SELECT * FROM flags
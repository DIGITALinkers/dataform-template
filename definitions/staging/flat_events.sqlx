config {
    type: "incremental",
    schema: "staging", 
    name: "flat_events",
    description: "Table of flattened GA4 events",
    uniqueKey: ["unique_event_id"],
    bigquery: {
        partitionBy: "date_partition",
        updatePartitionFilter: "date_partition >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)"
    },
    tags: ['ga4']
}

/*
  The config parameter 'updatePartitionFilter' is used to limit the number of partitions that whill be scanned during the MERGE.
  It should always be greater than or equal to '${dataform.projectConfig.vars.incremental_days_refresh}', otherwise the MERGE would miss 
  several partitions from the data coming in, and the result table would contain duplicate rows.
*/

with ga4_events as (
  
  SELECT 

    -- Standard Firebase data schema fields and object below  

    event_date,
    PARSE_DATE('%Y%m%d', event_date) as date_partition,  -- (DATE) Integer reformatted to a date. 
    event_timestamp,  -- (INTEGER) The time (in microseconds, UTC) at which the event was logged on the client.
    event_previous_timestamp,  -- (INTEGER) The time (in microseconds, UTC) at which the previous event was logged on the client.
    event_name,  -- (STRING) The name of the event.
    event_value_in_usd,  -- (FLOAT) The currency-converted value (in USD) of the event's "value" parameter.
    event_bundle_sequence_id,  -- (INTEGER) The sequential ID of the bundle in which these events were uploaded.
    event_server_timestamp_offset,  -- (INTEGER) Timestamp offset between collection time and upload time in micros.
    -- is_active_user, -- (BOOLEAN) Whether the user was active (True) or inactive (False) at any point in the calendar day. Included in only the daily tables (events_YYYYMMDD).
    user_id,  -- (STRING) The user ID assigned to a user.
    user_pseudo_id,  -- (STRING) The pseudonymous id (e.g., app instance ID) for the user.
    user_first_touch_timestamp,  -- (INTEGER) The time (in microseconds) at which the user first opened the app or visited the site.
    privacy_info,	-- (RECORD) The following fields are based on the consent status of your users when consent mode is enabled.
    user_ltv,  -- (RECORD) A record of Lifetime Value information about the user. This field is not populated in intraday tables.
    device,  -- (RECORD) A record of device information from which the event originated.
    geo,  -- (RECORD) A record of information about the geographic location where the event was initiated.
    app_info,  -- (RECORD) A record of information on the app in which the event was initiated.
    -- collected_traffic_source, -- (RECORD) A record of the traffic source data that was collected with the event.
    traffic_source,  -- (RECORD) A record of information about the traffic source that first acquired the user. This record is not populated in intraday tables.
    stream_id,  -- (STRING) The numeric ID of the data stream from which the event originated.
    platform,  -- (STRING) The data stream platform (Web, IOS or Android) from which the event originated.
    event_dimensions,  --	(RECORD)
    ecommerce,  -- (RECORD) A record of information about about any ecommerce events that have been setup on a website or app.
    items,  -- (RECORD) A record of information about items included in an event. It is repeated for each item.

    -------------------------------------------------------------------------------------------
    -- EVENT PARAMETERS (event_params) --------------------------------------------------------
    -- event_params	(RECORD) A repeated record of the parameters associated with this event. --
    -- Captures the specific nested keys of "event_params" into (epk_*) fields ----------------
    -------------------------------------------------------------------------------------------

    /* 
      This block dynamically generates SQL expressions to unnest event parameters from GA4 data.
      - `knownParams`: an array of objects with `name` and `type` for event_params with known types (e.g., int, string).
          --> Uses `getEventParam()` from helpers.js to extract values with correct typing.
          --> Modify this list in `includes/constants.js` if you want to add more known event parameters.
      - `flexibleParams`: an array of event_param names where type is unknown or mixed.
          --> Uses `coalesceEventParam()` to extract any value as string (auto-handling multiple types).
          --> Useful for handling dynamic or custom parameters without worrying about type mismatches.
    */

    ${constants.knownParams.map(p => helpers.getEventParam(p.name, p.type)).join(',\n')},
    ${constants.flexibleParams.map(p => helpers.coalesceEventParam(p)).join(',\n')},

    -------------------------------------------------------------------------------------------
    -- USER PROPERTIES (user_properties) ------------------------------------------------------
    -- user_properties (RECORD)	A repeated record of user properties that you have set. -------
    -- Capture the specific nested keys of "user_properties" into (upk_*) fields --------------
    -------------------------------------------------------------------------------------------

    /* 
      This block dynamically extracts user properties from GA4 data
      - `knownUserProperties`: unpacks known user_properties using proper types via `getUserProperty()`
      - `flexibleUserProperties`: unpacks unknown-type user_properties using `coalesceUserProperty()`
    */

    /* 
    ${constants.knownUserProperties.map(p => helpers.getUserProperty(p.name, p.type)).join(',\n')},
    ${constants.flexibleUserProperties.map(p => helpers.coalesceUserProperty(p)).join(',\n')},
    */


    _TABLE_SUFFIX as table_suffix -- added in the select statement for downstream use in incremental refreshes.

  FROM 
      ${ref('events_*')}

  WHERE 1=1

    -- for incremental runs, we only want to run the query on the past 3 days. For that we use the incremental() built-in function
    -- combined with the when() built-in function and with a variable "incremental_days_refresh", defined in dataform.json.
    
    ${ when(incremental(),
      `AND PARSE_DATE("%Y%m%d", _TABLE_SUFFIX) >= DATE_SUB(CURRENT_DATE(), INTERVAL CAST(${dataform.projectConfig.vars.incremental_days_refresh} AS INT64) DAY)`
    )}


)

SELECT
  CONCAT( 
    stream_id, '_', 
    event_date, '_',
    user_pseudo_id, '_',
    epk_ga_session_id, '_',
    event_name, '_',
    event_timestamp, '_',
    ROW_NUMBER() OVER(PARTITION BY 
      stream_id, 
      event_date, 
      user_pseudo_id, 
      epk_ga_session_id, 
      event_name, 
      event_timestamp)
  ) AS unique_event_id,
  CONCAT(user_pseudo_id, epk_ga_session_id) AS unique_session_id,
  *
FROM ga4_events